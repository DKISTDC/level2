upstream dev_app {
    # Talk to the host machine from inside Docker
    server host.docker.internal:3033 max_fails=0;   # <â€” no quarantine window
    # keepalive N would reuse TCP to upstream; for dev, disable to avoid stale FDs
    # (omit keepalive here to disable; or: keepalive 0; in older nginx)
}

server {
    listen 443 ssl;
    server_name localhost;
    gzip on;

    # resolver 8.8.8.8 ipv6=off;

    ssl_certificate /etc/nginx/certs/localhost.pem;
    ssl_certificate_key /etc/nginx/certs/localhost-key.pem;

    location / {
        proxy_pass http://dev_app;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket specific
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        # proxy_cache_bypass $http_upgrade;

        proxy_next_upstream error timeout http_502 http_503 http_504 non_idempotent;
        proxy_next_upstream_timeout 2s;
        proxy_next_upstream_tries 20;

        # Dev ergonomics
        proxy_buffering off;                     # see fresh logs/streaming output
        send_timeout 60s;
        proxy_read_timeout  60s;
        proxy_send_timeout  60s;

        # Client-side keepalive only (to avoid YOUR browser reusing stale upstream)
        keepalive_timeout 0s;
    }

    # Health check endpoint for liveness
    # location /health {
    #     proxy_pass http://host.docker.internal:3033/health;
    #     proxy_set_header Host $host;
    # }
}
