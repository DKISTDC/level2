services:

  # -- interservice-bus ----------------------------------------
  interservice-bus:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"    # AMQP protocol
      - "15672:15672"  # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 7s
      timeout: 5s
      retries: 5

  elastic-apm:
    image: elastic/apm-server:8.13.4
    # no logs when running docker-compose up
    attach: false

  # -- workers ---------------------------------------------------
  frame-cataloger: 
    image: frame-cataloger
    depends_on:
      interservice-bus:
        condition: service_healthy
    build:
      context: "${FRAME_CATALOGER_LOCAL:-../frame-cataloger}"

    # handles messages, saves a nearly-empty frame to metadata-store-api
    command: ["python", "dev/save.py"]

    environment:
      LOGURU_LEVEL: "INFO"
      GQL_AUTH_TOKEN: "dev"
      MESH_CONFIG: '{
          "interservice-bus": { "mesh_address": "interservice-bus","mesh_port": 5672},
          "system-monitoring-log-apm": {"mesh_address": "elastic-apm","mesh_port": 8200}
        }'



  # -- metadata-store-api ----------------------------------------

  metadata-postgres:
    image: metadata-postgres
    build:
      context: "${METADATA_STORE_API_LOCAL:-../metadata-store-api}"
      dockerfile: postgres.Dockerfile
    ports:
      - "54320:5432"

  metadata-mongodb:
    image: metadata-mongodb
    build:
      context: "${METADATA_STORE_API_LOCAL:-../metadata-store-api}"
      dockerfile: mongodb.Dockerfile
    ports:
      - "27017:27017"

  metadata-store-api:
    image: metadata-store-api
    depends_on:
      - metadata-mongodb
      - metadata-postgres
    build:
      context: "${METADATA_STORE_API_LOCAL:-../metadata-store-api}"
      dockerfile: Dockerfile
      pull: false

    # manually run the service, instead of using gunicorn
    command: ["python", "."]

    environment:
      MESH_CONFIG: '{
          "metadata-store-operations-support": { "mesh_address": "metadata-postgres","mesh_port": 5432},
          "metadata-store-processing-support": {"mesh_address": "metadata-postgres","mesh_port": 5432},
          "metadata-store-quality-report": {"mesh_address": "metadata-postgres","mesh_port": 5432},
          "metadata-store-search-support": {"mesh_address": "metadata-postgres","mesh_port": 5432},
          "metadata-store-object-inventory": {"mesh_address": "metadata-mongodb","mesh_port": 27017},
          "system-monitoring-log-apm": {"mesh_address": "localhost","mesh_port": 8200}
        }'

    ports:
      - "8080:8080"


  # level2 -----------------------------------------------

  postgres:
    image: postgres:16.4
    # this makes it try to always be on, even if the container isn't running
    # restart: always
    environment:
      POSTGRES_DB: level2
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
    volumes:
      - pgdata:/var/lib/pgsql/data
    ports:
      - "5432:5432"

  nginx:
    image: nginx:1.28.0-alpine
    volumes:
      - ./deps/nginx.conf:/etc/nginx/conf.d/default.conf
      - ~/certs:/etc/nginx/certs:ro
    ports:
      - "443:443"
      # - "4033:4033"
    attach: false

  # level2:
  #   build: .
  #   depends_on:
  #     - postgres
  #   environment:
  #     PORT: "8080"
  #     DATABASE_URL: postgres://guest:guest@postgres:5432/level2
  #     METADATA_API: http://internal-api-gateway.service.prod.consul/graphql
  #   ports:
  #     - "8080:8080"

# networks:
#   default:
#     driver: bridge

volumes:
  pgdata:
