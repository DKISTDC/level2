module NSO.Image.Primary where

import Control.Exception (Exception)
import Data.Massiv.Array ()
import Effectful
import Effectful.Error.Static
import Effectful.GenRandom
import NSO.Image.Headers
import NSO.Image.Headers.Parse (ParseError, runParseError)
import NSO.Prelude
import NSO.Types.Common
import NSO.Types.Inversion (Inversion)
import Telescope.Fits as Fits


data PrimaryHeader = PrimaryHeader
  { observation :: Observation
  , telescope :: Telescope
  , obsgeo :: Obsgeo
  , datacenter :: Datacenter
  , dkist :: DKISTHeader
  , adaptive :: AdaptiveOptics
  , contributing :: ContribExpProp
  }
  deriving (Generic)


instance ToHeader PrimaryHeader where
  toHeader h = writeHeader $ do
    sectionHeader "Observation" "Keys describing the observation and general metadata"
    addKeywords h.observation

    sectionHeader "Telescope" "Keys describing the pointing and op of the Telescope"
    addKeywords h.telescope
    addKeywords h.obsgeo

    sectionHeader "Datacenter" "Keys generated by the DKIST data center to describe processing performed, archiving or extra metadata"
    addKeywords h.datacenter
    addKeywords h.contributing

    sectionHeader "DKIST Operations" "Information about this configuration or operations of the facility when generating this data"
    addKeywords h.dkist

    sectionHeader "Adaptive Optics" "Keys describing aspects of the adaptive optics system"
    addKeywords h.adaptive


instance FromHeader PrimaryHeader where
  parseHeader h = do
    obs <- parseHeader @Observation h
    tel <- parseHeader @Telescope h
    obg <- parseHeader @Obsgeo h
    dtc <- parseHeader @Datacenter h
    dks <- parseHeader @DKISTHeader h
    adp <- parseHeader @AdaptiveOptics h
    ctb <- parseHeader @ContribExpProp h
    pure $ PrimaryHeader obs tel obg dtc dks adp ctb


primaryHeader :: (Error PrimaryError :> es, GenRandom :> es) => Id Inversion -> Header -> Eff es PrimaryHeader
primaryHeader ii l1 = runParseError PrimaryParse $ do
  observation <- observationHeader l1
  telescope <- telescopeHeader l1
  obsgeo <- obsgeoHeader l1
  datacenter <- datacenterHeader l1 ii
  dkist <- dkistHeader l1
  contributing <- contribExpProp l1
  adaptive <- adaptiveOpticsHeader l1
  pure $ PrimaryHeader{observation, telescope, obsgeo, datacenter, dkist, adaptive, contributing}


primaryHDU :: PrimaryHeader -> DataHDU
primaryHDU h = DataHDU (toHeader h) emptyDataArray


data PrimaryError
  = PrimaryParse ParseError
  deriving (Show, Exception, Eq)
